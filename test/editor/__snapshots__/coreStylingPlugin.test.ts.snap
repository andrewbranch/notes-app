// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters backspacing the first of a two-character leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 0,
    "focusKey": "0",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters backspacing the first of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 6,
    "focusKey": "0",
    "focusOffset": 6,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters backspacing the second of a two-character leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 1,
    "focusKey": "0",
    "focusOffset": 1,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters backspacing the second of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 7,
    "focusKey": "0",
    "focusOffset": 7,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters deleting a range including part of the leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Hello *bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 6,
    "focusKey": "0",
    "focusOffset": 6,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters deleting a range including part of the trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 7,
    "focusKey": "0",
    "focusOffset": 7,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters deleting a range including the first character of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bo*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 4,
    "focusKey": "0",
    "focusOffset": 4,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters deleting a range including the leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Hello ld**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 6,
    "focusKey": "0",
    "focusOffset": 6,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters deleting a range including the trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bo",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 4,
    "focusKey": "0",
    "focusOffset": 4,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters forward-deleting the first of a two-character leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 0,
    "focusKey": "0",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters forward-deleting the first of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 6,
    "focusKey": "0",
    "focusOffset": 6,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters forward-deleting the second of a two-character leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 1,
    "focusKey": "0",
    "focusOffset": 1,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters forward-deleting the second of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 7,
    "focusKey": "0",
    "focusOffset": 7,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including part of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*a",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 8,
    "focusKey": "0",
    "focusOffset": 8,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including part of the leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Hello *a*bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 8,
    "focusKey": "0",
    "focusOffset": 8,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including the first character of a two-character trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Boa*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 5,
    "focusKey": "0",
    "focusOffset": 5,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including the first character of a two-character trailing decorator sequence should remove the style 2`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Boa*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 5,
    "focusKey": "0",
    "focusOffset": 5,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including the leading decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Hellald**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 5,
    "focusKey": "0",
    "focusOffset": 5,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing a range including the trailing decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Boa",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 5,
    "focusKey": "0",
    "focusOffset": 5,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing the first character of a leading two-character decorator sequence should remove the style (middle of block) 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": " a*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 2,
    "focusKey": "0",
    "focusOffset": 2,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles deleting decorator characters replacing the first character of a leading two-character decorator sequence should remove the style (start of block) 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "a*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 1,
    "focusKey": "0",
    "focusOffset": 1,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles editing within the range backspacing the last character inside a range should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "****",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 2,
    "focusKey": "0",
    "focusOffset": 2,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles editing within the range deleting the entire contents of a range should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "****",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 2,
    "focusKey": "0",
    "focusOffset": 2,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles editing within the range forward-deleting the last character inside a range should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "****",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 2,
    "focusKey": "0",
    "focusOffset": 2,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles editing within the range inserting a character in the middle of a leading two-character decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*a*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 2,
    "focusKey": "0",
    "focusOffset": 2,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles editing within the range inserting a character in the middle of a trailing two-character decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*a*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 8,
    "focusKey": "0",
    "focusOffset": 8,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles splitting a range into two blocks splitting a block right after a style range should not remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Bold",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
      "2": Immutable.Record {
        "key": "2",
        "type": "unstyled",
        "text": "",
        "characterList": Immutable.List [],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "2",
    "anchorOffset": 0,
    "focusKey": "2",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles splitting a range into two blocks splitting a block right before a style range should not remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "",
        "characterList": Immutable.List [],
        "depth": 0,
        "data": Immutable.Map {},
      },
      "2": Immutable.Record {
        "key": "2",
        "type": "unstyled",
        "text": "**Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
              "core.styling.decorator",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
              "core.styling.decorator",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
              "core.styling.decorator",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
              "core.styling.decorator",
            ],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "2",
    "anchorOffset": 0,
    "focusKey": "2",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles splitting a range into two blocks splitting a range in the middle of a leading two-character decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
      "2": Immutable.Record {
        "key": "2",
        "type": "unstyled",
        "text": "*Bold**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "2",
    "anchorOffset": 0,
    "focusKey": "2",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles splitting a range into two blocks splitting a range in the middle of a trailing two-character decorator sequence should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bold*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
      "2": Immutable.Record {
        "key": "2",
        "type": "unstyled",
        "text": "*",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "2",
    "anchorOffset": 0,
    "focusKey": "2",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles splitting a range into two blocks splitting a range in the middle should remove the style 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "**Bo",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
      "2": Immutable.Record {
        "key": "2",
        "type": "unstyled",
        "text": "ld**",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "2",
    "anchorOffset": 0,
    "focusKey": "2",
    "focusOffset": 0,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;

exports[`coreStylingPlugin steps removeInlineStyles writing after a style range a character inserted immediately after a style range should not be styled 1`] = `
Object {
  "content": Immutable.Record {
    "entityMap": Object {},
    "blockMap": Immutable.OrderedMap {
      "0": Immutable.Record {
        "key": "0",
        "type": "unstyled",
        "text": "Boldx",
        "characterList": Immutable.List [
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [
              "BOLD",
            ],
            "entity": null,
          },
          Immutable.Record {
            "style": Immutable.OrderedSet [],
            "entity": null,
          },
        ],
        "depth": 0,
        "data": Immutable.Map {},
      },
    },
    "selectionBefore": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "selectionAfter": Immutable.Record {
      "anchorKey": "0",
      "anchorOffset": 0,
      "focusKey": "0",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
  },
  "selection": Immutable.Record {
    "anchorKey": "0",
    "anchorOffset": 5,
    "focusKey": "0",
    "focusOffset": 5,
    "isBackward": false,
    "hasFocus": true,
  },
}
`;
